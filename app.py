# -*- coding: utf-8 -*-
"""Flask App - Caries Detection - Ver1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i8wlKlmIGnRYIP98IAhGqJf0n6cO6axh
"""

import sys
# sys.path.append('/content/drive/My Drive/Colab Notebooks/')

from flask_ngrok import run_with_ngrok
from flask import Flask, render_template, send_file, flash, request, redirect, url_for, send_from_directory
from werkzeug.utils import secure_filename
import os
import io
import tensorflow as tf
import numpy as np
from skimage.io import imread, imshow
from skimage.transform import resize
import matplotlib.pyplot as plt

from PIL import Image

app = Flask(__name__, template_folder="templates/")
run_with_ngrok(app)   #starts ngrok when the app is run

UPLOAD_FOLDER = "uploadedMaterial/"
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

global model, graph
graph = tf.compat.v1.get_default_graph()
model = tf.keras.models.load_model("model.h5")

IMG_HEIGHT = 256
IMG_WIDTH = 256
IMG_CHANNELS = 3

# model.summary()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # if user does not select file, browser also
        # submit an empty part without filename
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            
            userInput = np.zeros((1, IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)
            img = imread(app.config['UPLOAD_FOLDER'] + filename)[:,:,:IMG_CHANNELS]
            img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)
            userInput[0] = img
            preds_test = model.predict(userInput, verbose=1)
            thresh = 0.18
            preds_test_t = (preds_test > thresh)

            print('predicted output - threshold map')
            imshow(np.squeeze(preds_test))
            plt.show()

            convertToImage = Image.fromarray((np.squeeze(preds_test_t[0]) * 255).astype("uint8"))
            imageFile = io.BytesIO()
            convertToImage.save(imageFile, 'PNG')
            imageFile.seek(0)
            
            return send_file(imageFile, mimetype='PNG')
            # return redirect(url_for('uploaded_file', filename=filename))
    return  render_template("index.html")

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

if __name__ == "__main__":
    app.run()